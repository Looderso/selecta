[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "selecta"
version = "0.1.0"
description = "A unified music library manager for Rekordbox, Spotify, and Discogs"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [{ name = "Lorenz HÃ¤usler", email = "Haeusler.Lorenz@gmail.com" }]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Intended Audience :: End Users/Desktop",
    "Topic :: Multimedia :: Sound/Audio",
    "Operating System :: MacOS :: MacOS X",
]

dependencies = [
    "PyQt6",           # Modern PyQt version
    "PyQt6-Qt6",       # Qt6 bindings
    "PyQt6-sip",       # SIP bindings
    "PyQt6-WebEngine", # Web Player
    "qtstylish",       # For modern styling
    "pyqtspinner",     # Loading spinner
    "pyqtdarktheme",   # Dark theme support
    "pyqttoast",       # Toast notifications
    "pillow",          # PIL fork
    # Garden packages will be added later once the core setup is working
    # API clients
    "spotipy",                  # Spotify API client
    "pyrekordbox",              # Rekordbox API client
    "google-api-python-client", # Google APIs client library
    "google-auth-oauthlib",     # Google OAuth library
    "pytube",                   # YouTube video downloading/streaming
    # Database and data handling
    "sqlalchemy",   # ORM for database access
    "alembic",      # Database migrations
    "sqlite-utils", # SQLite utilities (for Rekordbox DB)
    # Audio file handling
    "mutagen", # Audio metadata handling
    "tinytag", # Audio tag reading
    # Utilities
    "pydantic",          # Data validation
    "python-dotenv",     # Environment management
    "loguru",            # Better logging
    "httpx",             # Modern HTTP client
    "requests_oauthlib", # O-auth for testing
    "click",             # Command-line interface
    "click-completion",
    "appdirs",           # App directories management
    # Mac-specific dependencies
    "pyobjc-core; sys_platform == 'darwin'",
    "pyobjc-framework-Cocoa; sys_platform == 'darwin'",
    "pyobjc-framework-CoreServices; sys_platform == 'darwin'",
]

[project.optional-dependencies]
dev = [
    # Development tools
    "uv",         # Modern Python package manager
    "ruff",       # Fast Python linter/formatter
    "pre-commit", # Git hooks manager
    # Testing
    "pyinstaller", # For bundling macOS app
]

# Profiles for different development tasks
lint = ["ruff"]

[project.urls]
"Homepage" = "https://github.com/Looderso/selecta"
"Bug Tracker" = "https://github.com/Looderso/selecta/issues"

[project.scripts]
selecta = "selecta.cli.main:cli"

[project.gui-scripts]
selecta-gui = "selecta.app:run_app"

[tool.hatch.build.targets.wheel]
packages = ["src/selecta"]

[tool.ruff]
src = ["src"]
target-version = "py311"
line-length = 120

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "B",   # flake8-bugbear
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "D",   # pydocstyle
    "PYI", # flake8-pyi (type checking)
]
ignore = [
    "D100",  # Missing docstring in public module
    "D107",  # Missing docsting in __init__
    "D104",  # Missing docstring in public package
    "E402",  # Imports not first in code
    "E722",  # Allow bare excepts
    "N802",  # Allow uppercase method names
    "UP008", # allow user of super().__new__(cls)
]

fixable = ["ALL"]

[tool.ruff.lint.per-file-ignores]
"src/selecta/core/utils/type_helpers.py" = ["D102"]
"__init__.py" = ["F401"] # Unused imports
"tests/**/*.py" = ["D", "ANN"] # Docstring and annotation requirements in tests
"src/selecta/core/data/models/*.py" = [
    "ANN",
] # Ignore annotation requirements in SQLAlchemy models
"src/selecta/ui/**/*.py" = [
    "ANN204",
    "ANN202",
] # Ignore return type annotations in UI code

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["selecta"]
known-third-party = ["kivy", "spotipy", "python3-discogs_client", "sqlalchemy"]

[tool.pytest.ini_options]
testpaths = ["src/tests"]
python_files = "test_*.py"
markers = [
    "integration: marks tests as integration tests (requires real credentials)",
    "gui: marks tests that require a GUI",
    "rekordbox: marks tests that interact with Rekordbox",
    "spotify: marks tests that interact with Spotify",
    "discogs: marks tests that interact with Discogs",
    "youtube: marks tests that interact with YouTube",
]
